<tool id="csvtk-join" name="csvtk-join" version="0.1.0">
    <description>tables by column</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements" />
    <command detect_errors="exit_code"><![CDATA[

    ## Set the fields to join column(s) on.
    #######################################################################
    #set $split_on = str($column_text.in_text)


    ###################
    ## Start Command ##
    ###################
    csvtk join -i

        ## Set Tabular input/output flag if first input is tabular ##
        #############################################################
        #if $in_1[0].is_of_type("tabular"):
            -t -T
        #end if

        ## Set input files ##
        #####################
        #for $file in $in_1:
            '$file'
        #end for

        ## Specify fields to join ##
        ############################
        -F -f '$split_on' 
        
        ## Fill columns if wanted ##
        ############################
        #if $unmatched.wanted == 'yes':
            -k 
            --fill '$unmatched.fill_value'
        #end if
        
        ## To output ##
        ###############
        --num-cpus "\${GALAXY_SLOTS:-1}"
        > joined
    

    ]]></command>
    <inputs>
        <param type="data" name="in_1" format="csv,tabular"
        multiple="true" optional="false"
        label="Specify TSV or CSV file inputs"
        help="Input as many tsv or csv files to join. HOWEVER, they must all be the **same file type** or the tool will fail/not give results!" />
        <conditional name="column_text" >
            <param type="select" name="select" label="Join inputs based on" >
                <option value="column">Column Numbers</option>
                <option value="string">Column Name</option>
            </param>
            <when value="column">
                <param type="data_column" name="in_text"
                        data_ref="in_1" format_source="in_1"
                        multiple="True" force_select="True"
                        label="Select column numbers"
                        help="Select columns that will be used to join the input datasets. Column headers
                        DON'T have to match, just the values in the columns" />
            </when>
            <when value="string">
                <param type="text" name="in_text"
                optional="false"
                label="Join on column name"
                help="Specify column name to join inputs on. Multiple names can be given if separated by a ' , '.
                Please see the help section for examples on using multiple keys" />
            </when>
        </conditional>
        <conditional name="unmatched" >
            <param type="select" name="wanted"
            label="Keep Unmatched Columns?"
            help="Include unmatched columns in output results?"
            >
                <option value="no">No</option>
                <option value="yes">Yes</option>
            </param>
            <when value="yes">
                <param type="text" name="fill_value"
                default=""
                label="What to fill unmatched columns with"
                help="Specify value to fill into all of the columns with no data" />
            </when>
        </conditional>
    </inputs>
    <outputs>
        <data format_source="in_1" name="joined" from_work_dir="joined" label="$in_1[0].name joined by column $column_text.in_text" />
    </outputs>
    <tests>
        <test>
            
        </test>
    </tests>
    <help><![CDATA[
    
Csvtk - Join Help
-----------------

Info
####
Csvtk-Join is used to join two or more csv/tsv files together by either a column number or a column key.
It will join together the columns that have a matching value and create an output csv/tsv file (depending upon input file type).

Columns that are not matching will be discarded unless 'Keep Unmatched Columns' is set to 'Yes'

Usage
#####

**Ex. Matching based on column 1:**

.. code:: bash

    +------+--------+----------+           +----------+----------+----------+
    | Name | Colour | Food     |           | Username | Sport    | Column 3 |
    +======+========+==========+           +==========+==========+==========+
    | Joe  | Red    | Pancakes |     +     | Joe      | Swimming | Yes      |
    +------+--------+----------+           +----------+----------+----------+
    | John | Green  | Potatos  |           | John     | Running  | Yes      |
    +------+--------+----------+           +----------+----------+----------+

    -------------------------------------------------------------------------

    We would get the following table:

    +------+--------+----------+----------+----------+
    | Name | Colour | Food     | Sport    | Column 3 |
    +======+========+==========+==========+==========+
    | Joe  | Red    | Pancakes | Swimming | Yes      |
    +------+--------+----------+----------+----------+

    If we kept unmatched columns and filled them with 'NA', the following would be the output:

    +------+--------+----------+----------+----------+----------+
    | Name | Colour | Food     | Username | Sport    | Column 3 |
    +======+========+==========+==========+==========+==========+
    | Joe  | Red    | Pancakes | Joe      | Swimming | Yes      |
    +------+--------+----------+----------+----------+----------+
    | John | Green  | Potatos  | NA       | NA       | NA       |
    +------+--------+----------+----------+----------+----------+
    | NA   | NA     | NA       | Jacob    | Running  | Yes      |
    +------+--------+----------+----------+----------+----------+

----

**Ex. Matching based on name:**

.. code:: bash

    Here, we use the column header name as a way to match up the columns. This would be using "Name" as the input

    +------+--------+----------+       +------+----------+----------+       +----------+------+----------+
    | Name | Colour | Food     |       | Name | Sport    | Column 3 |       | Column 4 | Name | Column 5 |
    +======+========+==========+   +   +======+==========+==========+   +   +==========+======+==========+
    | Joe  | Red    | Pancakes |       | Joe  | Swimming | Yes      |       | Yes      | Joe  | Yes      |
    +------+--------+----------+       +------+----------+----------+       +----------+------+----------+
    | John | Green  | Potatos  |
    +------+--------+----------+       

    ------------------------------------------------------------------------------------------------------

    Would give the following table:

    +------+--------+----------+----------+----------+----------+----------+
    | Name | Colour | Food     | Sport    | Column 3 | Column 4 | Column 5 |
    +======+========+==========+==========+==========+==========+==========+
    | Joe  | Red    | Pancakes | Swimming | Yes      | Yes      | Yes      |
    +------+--------+----------+----------+----------+----------+----------+

----

**Ex. Matching data in multiple columns:**

.. code:: bash

    If using multiple columns, the values that are found to be the same in both columns will be put in the output.
    If only one matches, or neither matches, then that row is not included in the output

    The following would occur using column names as "Name,Column 3"

    +------+----------+----------+           +----------+------+----------+           
    | Name | Sport    | Column 3 |           | Column 4 | Name | Column 3 |
    +======+==========+==========+           +==========+======+==========+
    | Joe  | Swimming | Yes      |     +     | Yes      | Joe  | Yes      |
    +------+----------+----------+           +----------+------+----------+
    | Jake | Track    | No       |           | Yes      | Jake | Yes      |
    +------+----------+----------+           +----------+------+----------+

    -----------------------------------------------------------------------

    Would Yield:

    +------+----------+----------+----------+
    | Name | Sport    | Column 3 | Column 4 |
    +======+==========+==========+==========+
    | Joe  | Swimming | Yes      | Yes      |
    +------+----------+----------+----------+

----

More Information
################
For information from the creators of csvtk, please visit their site `here <https://bioinf.shenwei.me/csvtk/usage/#join>`_.
Although be aware that some features may not be available and some small changes were made to work with Galaxy.

**Notable changes from their documentation:**

- Cannot specify multiple file header names (IE cannot use "name;username" as a valid column match)

- Column Names are Case Sensitive

    ]]></help>
    <expand macro="citations" />
</tool>